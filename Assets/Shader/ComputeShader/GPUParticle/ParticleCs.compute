#pragma kernel CSMain

#define thread_group_size_x 4
#define thread_group_size_y 4

struct PositionStruct {
	float3 pos;
};

struct OffsetStruct {
	float offset;
};

struct CBufferStruct {
	float t;
};

RWStructuredBuffer<PositionStruct> output;
RWStructuredBuffer<OffsetStruct> offsets;
RWStructuredBuffer<CBufferStruct> cBuffer;
RWStructuredBuffer<float3> color;

RWTexture2D<float4> Result;

float3 Wave(float3 p, int idx, uint3 id) {
	p.x = cos(cBuffer[0].t * 10 + id.x);
	p.y = sin(cBuffer[0].t * 10 + id.y  + id.x  );
	p.z = sin(cBuffer[0].t * 10 + offsets[idx].offset * 10);
	return p;
}

float3 SetColor(float3 p, uint3 id) {
	p.x = abs(sin(cBuffer[0].t + id.x));
	p.y = abs(sin(cBuffer[0].t + id.y));
	p.z = abs(sin(cBuffer[0].t + id.x + id.y));
	return p;
}

[numthreads(thread_group_size_x, thread_group_size_y,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//int idx = id.x + id.y * thread_group_size_x * 32;
	//float spacing = 1;
	//float3 pos = float3(id.x * spacing,id.y * spacing,id.z * spacing);
	//pos = Wave(pos,idx,id);
	//color[idx] = SetColor(pos,id);

	int idx = id.x + id.z;
	float3 pos = float3(id.x,id.y,id.z);
	pos = Wave(pos,idx,id);
	color[idx] = SetColor(pos,id);

	output[idx].pos = pos;
}
